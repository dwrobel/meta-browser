Index: chromium-83.0.4103.61/third_party/wayland/features.gni
===================================================================
--- chromium-83.0.4103.61.orig/third_party/wayland/features.gni
+++ chromium-83.0.4103.61/third_party/wayland/features.gni
@@ -5,9 +5,9 @@
 declare_args() {
   # Controls whether the build should use the version of Wayland
   # library shipped with the system or Chromium third_party.
-  use_system_libwayland = false
+  use_system_libwayland = true
 
   # Path to wayland-scanner. Has effect only when the system libwayland is used.
   assert(host_os == "linux")
-  system_wayland_scanner_path = "/usr/bin/wayland-scanner"
+  system_wayland_scanner_path = "wayland-scanner"
 }
Index: chromium-83.0.4103.61/third_party/wayland/wayland_scanner_wrapper.py
===================================================================
--- chromium-83.0.4103.61.orig/third_party/wayland/wayland_scanner_wrapper.py
+++ chromium-83.0.4103.61/third_party/wayland/wayland_scanner_wrapper.py
@@ -15,9 +15,13 @@ import subprocess
 import sys
 
 def generate_code(wayland_scanner_cmd, code_type, path_in, path_out):
-  ret = subprocess.call([wayland_scanner_cmd, code_type, path_in, path_out])
-  if ret != 0:
-    raise RuntimeError("wayland-scanner returned an error: %d" % ret)
+  try:
+    cmd = [wayland_scanner_cmd, code_type, path_in, path_out]
+    ret = subprocess.call([wayland_scanner_cmd, code_type, path_in, path_out])
+    if ret != 0:
+      raise RuntimeError("wayland-scanner returned an error: %d" % ret)
+  except OSError as e:
+    raise RuntimeError("wayland-scanner: cwd({}) cmd({}) error({}): \"{}\"".format(os.getcwd(), ' '.join(map(str,cmd)), e.errno, e.strerror))
 
 def main(argv):
   parser = argparse.ArgumentParser()
@@ -28,7 +32,7 @@ def main(argv):
                       help="Input protocol file paths relative to src root.")
 
   options = parser.parse_args()
-  cmd = os.path.realpath(options.cmd)
+  cmd = options.cmd
   src_root = options.src_root
   root_gen_dir = options.root_gen_dir
   protocols = options.protocols
@@ -37,7 +41,7 @@ def main(argv):
     protocol_path = os.path.join(src_root, protocol)
     protocol_without_extension = protocol.rsplit(".", 1)[0]
     out_base_name = os.path.join(root_gen_dir, protocol_without_extension)
-    generate_code(cmd, "private-code", protocol_path,
+    generate_code(cmd, "code", protocol_path,
                   out_base_name + "-protocol.c")
     generate_code(cmd, "client-header", protocol_path,
                   out_base_name + "-client-protocol.h")
